/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => ThumbyPlugin
});
var import_obsidian2 = __toModule(require("obsidian"));

// settings.ts
var import_obsidian = __toModule(require("obsidian"));
var ThumbySettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Thumbnails Settings" });
    console.log(this.plugin.settings);
    const attachmentLocation = this.app.vault.getConfig("attachmentFolderPath");
    new import_obsidian.Setting(containerEl).setName("Save Thumbnail Info").setDesc("Save thumbnail information inside your note, so they work offline").addToggle((toggle) => toggle.setValue(this.plugin.settings.storeInfo).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.storeInfo = value;
      yield this.plugin.saveSettings();
      this.display();
    })));
    if (this.plugin.settings.storeInfo) {
      new import_obsidian.Setting(containerEl).setName("Save Images").setDesc("Save thumbnail images locally in vault").addToggle((toggle) => toggle.setValue(this.plugin.settings.saveImages).onChange((value) => __async(this, null, function* () {
        this.plugin.settings.saveImages = value;
        yield this.plugin.saveSettings();
        this.display();
      })));
      if (this.plugin.settings.saveImages) {
        new import_obsidian.Setting(containerEl).setName("Image Location").setDesc("Where thumbnail images should be saved").addDropdown((dropdown) => dropdown.addOption("defaultAttachment", "Default attachment location").addOption("specifiedFolder", "In the folder specified below").setValue(this.plugin.settings.imageLocation).onChange((value) => __async(this, null, function* () {
          this.plugin.settings.imageLocation = value;
          this.display();
          yield this.plugin.saveSettings();
        })));
        if (this.plugin.settings.imageLocation === "defaultAttachment") {
          new import_obsidian.Setting(containerEl).setName("Default attachment location").setDesc("Options > Files & Links > Default location for new attachments").addText((text) => text.setValue(attachmentLocation).setDisabled(true)).setClass("default-attachment-info");
        } else if (this.plugin.settings.imageLocation === "specifiedFolder") {
          new import_obsidian.Setting(containerEl).setName("Image Folder").setDesc("The folder where thumbnail images should be saved").addText((text) => text.setPlaceholder("ex: Files/Thumbnails").setValue(this.plugin.settings.imageFolder).onChange((value) => __async(this, null, function* () {
            this.plugin.settings.imageFolder = value;
            yield this.plugin.saveSettings();
          })));
        }
      }
    }
  }
};

// main.ts
var DEFAULT_SETTINGS = {
  storeInfo: false,
  saveImages: false,
  imageLocation: "defaultAttachment",
  imageFolder: ""
};
var ThumbyPlugin = class extends import_obsidian2.Plugin {
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new ThumbySettingTab(this.app, this));
      this.registerMarkdownCodeBlockProcessor("vid", (source, el, ctx) => __async(this, null, function* () {
        var _a, _b, _c;
        const sourceLines = source.trim().split("\n");
        const url = sourceLines[0];
        let info;
        if (this.settings.storeInfo) {
          info = this.parseStoredInfo(source);
        }
        if (!this.settings.storeInfo || !info.infoStored) {
          info = yield this.getVideoInfo(url);
        }
        if (info.networkError && !info.infoStored) {
          const url2 = source.trim().split("\n")[0];
          el.createEl("a", { text: url2, href: url2 });
          return;
        }
        const sourcePath = typeof ctx == "string" ? ctx : (_c = (_b = ctx == null ? void 0 : ctx.sourcePath) != null ? _b : (_a = this.app.workspace.getActiveFile()) == null ? void 0 : _a.path) != null ? _c : "";
        if (!info.vidFound) {
          const component = new import_obsidian2.MarkdownRenderChild(el);
          import_obsidian2.MarkdownRenderer.renderMarkdown(`>[!WARNING] Cannot find video
>${info.url}`, el, sourcePath, component);
          return;
        }
        if (this.settings.storeInfo && !info.infoStored) {
          this.storeVideoInfo(info, el, ctx);
        }
        if (!this.settings.storeInfo && sourceLines.length > 1) {
          this.removeStoredInfo(info, el, ctx);
        }
        this.createThumbnail(el, info);
      }));
      this.addCommand({
        id: "insert-thumbnail-from-clipboard",
        name: "Insert thumbnail from URL in clipboard",
        editorCallback: (editor, view) => __async(this, null, function* () {
          const clipText = yield navigator.clipboard.readText();
          const id = yield this.getVideoId(clipText);
          if (id === "") {
            new import_obsidian2.Notice("No valid video in clipboard");
            return;
          }
          editor.replaceSelection(`\`\`\`vid
${clipText}
\`\`\``);
        })
      });
    });
  }
  onunload() {
  }
  createThumbnail(el, info) {
    let thumbnailUrl = info.thumbnail;
    if (thumbnailUrl.indexOf("https://") !== 0) {
      const file = this.app.vault.getAbstractFileByPath(thumbnailUrl);
      thumbnailUrl = this.app.vault.getResourcePath(file);
    }
    const container = el.createEl("a", { href: info.url });
    container.addClass("thumbnail");
    container.createEl("img", { attr: { "src": thumbnailUrl } }).addClass("thumbnail-img");
    const textBox = container.createDiv();
    textBox.addClass("thumbnail-text");
    textBox.createDiv({ text: info.title, title: info.title }).addClass("thumbnail-title");
    textBox.createEl("a", { text: info.author, href: info.authorUrl, title: info.author }).addClass("thumbnail-author");
  }
  parseStoredInfo(source) {
    const info = {
      url: "",
      thumbnail: "",
      title: "",
      author: "",
      authorUrl: "",
      vidFound: false,
      networkError: false,
      infoStored: false,
      imageSaved: false
    };
    const input = source.trim().split("\n");
    if (input.length !== 5) {
      return info;
    }
    for (const [i, line] of input.entries()) {
      if (i !== 0) {
        const sepIndex = line.indexOf(": ");
        if (sepIndex === -1) {
          return info;
        }
        const d = line.substring(sepIndex + 2);
        input[i] = d;
      }
    }
    info.url = input[0];
    info.title = input[1];
    info.author = input[2];
    info.thumbnail = input[3];
    info.authorUrl = input[4];
    info.vidFound = true;
    if (!info.thumbnail.contains("https://")) {
      const existingFile = this.app.vault.getAbstractFileByPath(info.thumbnail);
      if (existingFile) {
        info.imageSaved = true;
      }
      if (!this.settings.saveImages) {
        return info;
      }
    } else if (this.settings.saveImages) {
      return info;
    }
    info.infoStored = true;
    return info;
  }
  storeVideoInfo(info, el, ctx) {
    return __async(this, null, function* () {
      const section = ctx.getSectionInfo(el);
      if (!section) {
        return;
      }
      if (this.settings.saveImages && !info.imageSaved) {
        info.thumbnail = yield this.saveImage(info);
      }
      const content = `\`\`\`vid
${info.url}
Title: ${info.title}
Author: ${info.author}
ThumbnailUrl: ${info.thumbnail}
AuthorUrl: ${info.authorUrl}
\`\`\``;
      const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
      if (view) {
        const startPos = {
          line: section.lineStart,
          ch: 0
        };
        const endPos = {
          line: section.lineEnd,
          ch: view.editor.getLine(section.lineEnd).length
        };
        view.editor.replaceRange(content, startPos, endPos);
      }
    });
  }
  saveImage(info) {
    return __async(this, null, function* () {
      const id = yield this.getVideoId(info.url);
      let filePath = "";
      if (this.settings.imageLocation === "specifiedFolder") {
        filePath = `${this.settings.imageFolder}/${id}.jpg`;
      } else {
        filePath = `${this.app.vault.getConfig("attachmentFolderPath")}/${id}.jpg`;
      }
      const existingFile = this.app.vault.getAbstractFileByPath(filePath);
      if (existingFile) {
        return existingFile.path;
      }
      const reqParam = {
        url: info.thumbnail
      };
      let file;
      try {
        const req = yield (0, import_obsidian2.requestUrl)(reqParam);
        if (req.status === 200) {
          file = yield this.app.vault.createBinary(filePath, req.arrayBuffer);
        }
      } catch (error) {
        return info.thumbnail;
      }
      console.log(`Path ${file.path}`);
      const localUrl = file.path;
      return localUrl;
    });
  }
  getTrimmedResourcePath(file) {
    const path = this.app.vault.getResourcePath(file);
    const endPos = path.indexOf(".jpg") + 4;
    return path.substring(0, endPos);
  }
  removeStoredInfo(info, el, ctx) {
    const section = ctx.getSectionInfo(el);
    if (!section) {
      return;
    }
    const content = `\`\`\`vid
${info.url}
\`\`\``;
    const view = this.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (view) {
      const startPos = {
        line: section.lineStart,
        ch: 0
      };
      const endPos = {
        line: section.lineEnd,
        ch: view.editor.getLine(section.lineEnd).length
      };
      view.editor.replaceRange(content, startPos, endPos);
    }
  }
  getVideoInfo(url) {
    return __async(this, null, function* () {
      const info = {
        url,
        thumbnail: "",
        title: "",
        author: "",
        authorUrl: "",
        vidFound: false,
        networkError: false,
        infoStored: false,
        imageSaved: false
      };
      let reqUrl = "";
      const isYoutube = url.includes("https://www.youtube.com/watch?v=") || url.includes("https://youtu.be/") || url.includes("https://www.youtube.com/shorts/");
      const isVimeo = url.includes("https://vimeo.com/");
      if (isYoutube) {
        reqUrl = `https://www.youtube.com/oembed?format=json&url=${url}`;
      } else if (isVimeo) {
        reqUrl = `https://vimeo.com/api/oembed.json?url=${url}`;
      } else {
        return info;
      }
      try {
        const reqParam = {
          url: reqUrl
        };
        const res = yield (0, import_obsidian2.requestUrl)(reqParam);
        if (res.status === 200) {
          if (isYoutube) {
            const videoId = yield this.getVideoId(url);
            info.thumbnail = `https://i.ytimg.com/vi/${videoId}/mqdefault.jpg`;
          } else {
            info.thumbnail = res.json.thumbnail_url;
          }
          info.title = res.json.title;
          info.author = res.json.author_name;
          info.authorUrl = res.json.author_url;
          info.vidFound = true;
        }
      } catch (error) {
        console.error(error);
        info.networkError = true;
      }
      return info;
    });
  }
  getVideoId(url) {
    return __async(this, null, function* () {
      let id = "";
      if (url.includes("https://www.youtube.com/watch?v=")) {
        const matches = url.match(/v=([-\w\d]+)/);
        if (matches !== null) {
          id = matches[1];
        }
      } else if (url.includes("https://youtu.be/")) {
        const matches = url.match(/youtu.be\/([-\w\d]+)/);
        if (matches !== null) {
          id = matches[1];
        }
      } else if (url.includes("https://www.youtube.com/shorts/")) {
        const matches = url.match(/shorts\/([-\w\d]+)/);
        if (matches !== null) {
          id = matches[1];
        }
      } else if (url.includes("https://vimeo.com/")) {
        const matches = url.match(/vimeo.com\/([\w\d]+)/);
        if (matches !== null) {
          id = matches[1];
          if (!/^[0-9]+$/.exec(id)) {
            id = yield this.fetchVimeoVideoId(url);
          }
        }
      }
      return id;
    });
  }
  fetchVimeoVideoId(url) {
    return __async(this, null, function* () {
      let id = "";
      try {
        const reqParam = {
          url: `https://vimeo.com/api/oembed.json?url=${url}`
        };
        const res = yield (0, import_obsidian2.requestUrl)(reqParam);
        if (res.status === 200 && res.json.video_id) {
          id = res.json.video_id.toString();
        }
      } catch (error) {
        console.error(error);
      }
      return id;
    });
  }
};
//# sourceMappingURL=data:application/json;base64,
